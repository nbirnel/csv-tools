#!/usr/bin/env perl
use strict;
use vars qw($opt_W $opt_w $opt_8);
use warnings;
use Getopt::Std;
use Text::CSV;

my (@requests);
my (%header);
my (%filler);

my $error = 0;

my $lines = 0;
my $utf8 = '';

getopts('Ww8');
if ($opt_w) { $/ = "\r\n"; }
if ($opt_W) { $\ = "\r\n"; }
if ($opt_8) { $utf8 = ':encoding(utf8)'; }

my $csvin  = Text::CSV->new ({ binary => 1, eol => $/ });
my $csvout = Text::CSV->new ({ binary => 1, eol => $\, always_quote =>1 });

@requests = &cook($ARGV[0]);
shift;

my $stdout;
open $stdout, ">-$utf8" or die "Can't open standard out: $!";

@ARGV = ("-") unless @ARGV;
while (@ARGV) {
    my $fh;
    $ARGV= shift @ARGV;
    if ($ARGV eq '-') {
        $fh = *STDIN;
        open $fh, "<-$utf8" or die "Can't open standard in: $!";
    } else {
        open $fh, "<$utf8", $ARGV or die "Can't open $ARGV: $!";
    }
    my $file_lines = 0;

    LINE: while (my $row = $csvin->getline ( $fh )) {
        $lines++;
        $file_lines++;
        my @input = @$row;
        my @output;

        my $ref_output = \@output;
        my $i = 0;
        foreach my $keeper (@requests) {
            if ($lines == 1) {
                if (exists $header{$i}) {
                    $output[$i] = $header{$i};
                } elsif ($keeper == 0) {
                    $output[$i] = '';
                } else { 
                    $output[$i] = $input[$keeper - 1]; 
                }
            } elsif (exists $filler{$i}) {
                    $output[$i] = $filler{$i};
            } elsif ($keeper == 0) { 
                $output[$i] = ''; 
            } else { 
                $output[$i] = $input[$keeper - 1];
            }

            $i++;
        }
        my $status = $csvout->print ($stdout, $ref_output);
        unless ($status) {
            warn "LINE: $lines - $file_lines of $ARGV\t wrote incorrectly\n";
        }
    }
    if (! $csvin->eof) {
        $csvin->error_diag();
        $error++;
    }
    close $fh;
}

sub cook {
    my @raw = split /,/, shift;
    my (@cooked);
    foreach my $range (@raw) {
        if ($range =~ /^\d+$/) { push @cooked, $range; }
        elsif ($range =~ /^(\d+)-(\d+)$/) { push @cooked, ($1..$2); }
        elsif ($range =~ /^(\d+):([^:]+):?$/) { 
            push @cooked, $1;
            $header{$#cooked} = $2;
        }
        elsif ($range =~ /^(\d+):([^:]+):([^:]+)$/) { 
            push @cooked, $1;
            $header{$#cooked} = $2;
            $filler{$#cooked} = $3;
        }
        elsif ($range =~ /^(\d+)::([^:]+)$/) { 
            push @cooked, $1;
            $filler{$#cooked} = $2;
        }
        else { die "bad field name or range $range" ; }
    }
    return @cooked;
}
