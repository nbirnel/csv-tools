#!/usr/bin/env perl
use strict;
use warnings;
use vars qw($opt_i $opt_8);
use Getopt::Std;
use Text::CSV;

my (@requests);

my $inverse = 0;
my @input;
my $csvin  = Text::CSV->new ({ binary => 1, eol => $/ });
my $utf8 = '';

getopts('i8');
if ($opt_i) { $inverse=1; }
if ($opt_8) { $utf8 = ':encoding(utf8)'; }

while (scalar(@ARGV) > 1) {
    push @requests, (shift @ARGV);
}

my $stdout;
open $stdout, ">-$utf8" or die "Can't open standard out: $!";

@ARGV = ("-") unless @ARGV;
while (@ARGV) {
    my $fh;
    $ARGV= shift @ARGV;
    if ($ARGV eq '-') {
        $fh = *STDIN;
        open $fh, "<-$utf8" or die "Can't open standard in: $!";
    } else {
        open $fh, "<$utf8", $ARGV or die "Can't open $ARGV: $!";
    }
    my $file_lines = 0;

    LINE: while (my $row = $csvin->getline ( $fh )) {
        @input = @$row;
        if    ($inverse)  { &printinverse(); }
        elsif (@requests) { &printrequests(); }
        else {
            my $i = 0;
            foreach my $field (@input) {
                printf("%3d: %s\n", ++$i, $field);
            }
        }
        last LINE;
    }
}

sub printinverse() {
    my $notfirst;
    my $i = 0;
    IFIELD: foreach my $field (@input) {
        $i++;
        foreach my $request (@requests) {
            if ($request eq $field) { next IFIELD; }
        }
        if ($notfirst) { printf ','; }
        printf('%d', $i);
        $notfirst = 1;
    }
}

sub printrequests() {
    #FIXME This is essentially the last function inside-out. refactor?
    my $notfirst;
    foreach my $request (@requests) {
        if ($notfirst) { printf ',' }
        my $i = 0;
        FIELD: foreach my $field (@input) {
            $i++;
            if ($request eq $field) {
                printf('%d', $i);
                last FIELD;
            } 
        }
        $notfirst = 1;
    }
}

