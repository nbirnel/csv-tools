#!/usr/bin/env perl
use utf8;
use strict;
use warnings;
use vars qw($opt_D $opt_d $opt_p $opt_Q $opt_q $opt_s $opt_v $opt_8);
use Getopt::Std;
use Text::CSV;

my ($is_pop, $silent, $verbose, $nf, $of);

my $error = 0;

my @is_pop;
my @rows;
my $lines = 0;
my $csvin  = Text::CSV->new ({ binary => 1, eol => $/ });
my $csvout = Text::CSV->new ({ binary => 1, eol => $/, always_quote =>1 });
my $utf8 = '';

getopts('D:d:pq:Q:sv8');
if ($opt_D) { $csvout->sep_char ($opt_D); }
if ($opt_d) { $csvin->sep_char ($opt_d); }
if ($opt_Q) { $csvout->quote_char ($opt_Q); }
if ($opt_p) { $is_pop = 1; }
if ($opt_q) { $csvin->quote_char ($opt_q); }
if ($opt_s) { $silent = 1; }
if ($opt_v) { $verbose = 1; }
if ($opt_8) { $utf8 = ':encoding(utf8)'; }

my $stdout;
open $stdout, ">-$utf8" or die "Can't open standard out: $!";

@ARGV = ("-") unless @ARGV;
while (@ARGV) {
    my $fh;
    $ARGV= shift @ARGV;
    if ($ARGV eq '-') {
        $fh = *STDIN;
        open $fh, "<-$utf8" or die "Can't open standard in: $!";
    } else {
        open $fh, "<$utf8", $ARGV or die "Can't open $ARGV: $!";
    }
    my $file_lines = 0;

    LINE: while (my $row = $csvin->getline ( $fh )) {
        $lines++;
        $file_lines++;
        my @fields = @$row;
        $nf = $#fields + 1;

        if ($lines == 1) {
            $of = $nf;
        }
        if ($nf != $of) {
            warn "LINE: $lines - $file_lines of $ARGV\t$nf fields, $of in previous line\n";
            $error++;
        }
        $of = $nf;
        if ($verbose) {
            $csvout->print ($stdout, $row);
        }
        if ($is_pop) {
            &ck_pop(\@fields);
        }
    }
    if (! $csvin->eof) {
        $csvin->error_diag();
        $error++;
    }
    close $fh;
}

if (!$silent) {
    if ($error) {
        warn "$error errors on $lines lines.\n";
    } else {
        warn "$lines lines of $of columns each.\n";
    }
}

if ($is_pop) {
    &print_pop;
}

exit $error;

sub ck_pop {
    my $a_ref = shift;
    foreach( 0 .. $#$a_ref ) {
        if ($$a_ref[$_] =~ /./) {
            $is_pop[$_] = 1;
        }
    }
}

sub print_pop{
    foreach( 0 .. $#is_pop ) {
        if ($is_pop[$_]) { 
            printf '%d%s', $_ + 1, ($_ == $#is_pop) ? "" : ",";
        }
    }
    printf "\n";
}

